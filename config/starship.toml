format = """\
${status}\
${username}\
${hostname}\
${directory}\
${python}\
${custom.pythonvenv}\
${kubernetes}\
${custom.uim}\
${git_branch}\
${git_status}\
${character}\
"""

add_newline = false
#right_format = """\
#[\ue0b6](fg:black black)\
#${cmd_duration}\
#"""

"$schema" = 'https://starship.rs/config-schema.json'

# This setup generally uses characters from powerline
# see https://github.com/ryanoasis/powerline-extra-symbols for codes

[character]
format = "[](bg:black)[$symbol](bold) "
success_symbol = "[ÓÇ∞](fg:black black)"
error_symbol = "[ÓÇ∞](fg:black black)"
disabled = false

[username]
style_root = 'bg:black bold red'
style_user = 'bg:black yellow'
format = '[$user]($style)'

[status]
disabled = false
style = "bg:black red"
symbol = "‚úó" #"‚èé"
format = "[$symbol]($style)"

[hostname]
ssh_only = true
style = 'bg:black bold dimmed green'
format = "[ $hostname ]($style)"

[directory]
style = "bg:black white"
# regular format style
format = '[$path]($style)[$read_only]($read_only_style)'
# same, but if at repo
repo_root_format = '[$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)[$path]($style )[$read_only ]($read_only_style)'
repo_root_style = "bg:black bold white"
# before repo applies basically to the truncation symbol
before_repo_root_style = "bg:black blue"
read_only = "[\uf023]"
read_only_style = "bg:black red"
truncate_to_repo = true
#fish_style_pwd_dir_length = 3
# MISSING: cannot change the separator between dirs (looks cluttered)
# https://github.com/starship/starship/pull/1222
truncation_symbol = "‚Ä¶"
truncation_length = 5

[time]
disabled = true
style = "bg:black bold white"
format = "[$time]($style) "

[kubernetes]
symbol = "Û∞õ¢" # or ‚ò∏ Û±Éæ
detect_folders = ["kube", ".kube", "tl", "controller"]
detect_files = ["Cargo.toml", "Chart.yaml", "justfile"]
disabled = false
style = "bg:black 117"
format = '[$context[$symbol](bg:black 251)$namespace ]($style)'
contexts = [
  { context_pattern = "prod.*", context_alias = "prod", style = "bg:black 204" },
  { context_pattern = "sandbox.*", context_alias = "sbx" },
  { context_pattern = "dev.*", context_alias = "dev" },
  { context_pattern = ".*eks-dev.*", context_alias = "eks-dev" },
  { context_pattern = ".*eks-play.*", context_alias = "eks-play" },
  { context_pattern = ".*eks-anal.*", context_alias = "eks-anal" },
  { context_pattern = "k3d-.*(?P<k3d>[\\d]{2})", context_alias = "Êàø$k3d" },
  { context_pattern = ".*" },
]

[git_branch]
style = "bg:black bold 85"
symbol = 'ÓÇ† ' #Û∞≥è/Ôêò
format = "[$symbol]($style)[$branch](bg:black 85)"
truncation_length = 8
truncation_symbol = "."

[git_status]
disabled = false
# This module will always cause a non-constant gap betwen the last git thing and the next module;
# if the format string has ANY characters; 1 space added + format gunk + 0 spaces => no gap at the end
# if the format string has nothing; 1 space added => 1 space gap at the end
# you can change the end, but you always get an inconsistency: https://github.com/starship/starship/issues/1724
# because of this, we put git at the end so it doesn't look like "obviously misconfigured padding"
format = '[ ${ahead}${behind}${modified}${conflicted}${stashed}${deleted}${renamed}${staged}${untracked}]($style)'
style = "bg:black 85"
conflicted = "üè≥ "
ahead = "‚á°"#"‚Üë$count"
behind = "‚á£"#"‚Üì$count"
diverged = "‚áï"
untracked = "?" #‚Ä¶
stashed = "‚â°"
modified = '+$count'
staged = "‚óè"
renamed = "Û±û∏"#ÔïìÔëö
deleted = "Û±°Ç" #‚öë
#up_to_date = "‚úî"

[python]
disabled = true # dislike this module because it adds padding even when virtualenv is empty string
symbol = '' #'ÓòÜ' # nice quick python detect
style = "bg:black yellow"
format = '[${symbol}${virtualenv} ]($style)'

[custom.pythonvenv]
# alternative python.. better padding because the whole thing is off when no venv
disabled = false
when = ''' test -n "$VIRTUAL_ENV" '''
command = "echo -n ${VIRTUAL_ENV##*/}"
style = "bg:black yellow"
format = '[($output )]($style)'

[line_break]
disabled = true

[cmd_duration]
disabled = true
min_time = 2_000
format = '[took $duration ]($style)'
style = 'bg:black bold yellow'

[custom.uim]
command = 'case $(cat ~/.uim.d/fep/getmode-${UIM_FEP_PID}) in; 1) echo -n "„ÅÇ" ;; 2) echo -n "„Ç¢" ;; *) echo -n "„Éº" ;; esac'
when = ''' test -n "$UIM_FEP_PID" '''
style = "bg:black yellow"
format = '[ $output]($style)'
