#theme = "hex_toxic"
#theme = "catppuccin_mocha"
#theme = "night_owl"
#theme = "rose_pine_moon"
#theme = "tokyonight_storm"
theme = "tokyonight"

[keys.normal.backspace]
b = ":sh zellij run -f -x=0 -y=60% --width=100% -- just build"
r = ":sh zellij run -f -x=0 -y=60% --width=100% -- just run"
t = ":sh zellij run -f -x=0 -y=60% --width=100% -- just test" #TODO: run test under cursor?
l = ":sh zellij run -f -x=0 -y=60% --width=100% -- just lint"
m = ":sh zellij run -- mdt" # Decent, but better if https://github.com/helix-editor/helix/issues/3134 lands
#g = ":sh zellij run -f -- rg " # ..actually requires interpolation ^
s = ":sh zellij run -cf -x=0 -y=60% --width=100% -- zsh"
c = ":config-reload"
p = ":toggle-option lsp.display-inlay-hints"
f = ":theme ayu_dark"
d = ":theme catppuccin_mocha_transparent"

[keys.normal."A-m"] # markdown menu
# Turn into heading
"A-1" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/# /'", "collapse_selection"]
"A-2" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/## /'", "collapse_selection"]
"A-3" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/### /'", "collapse_selection"]
"A-4" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/#### /'", "collapse_selection"]
"A-5" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/##### /'", "collapse_selection"]
"A-6" = ["extend_to_line_bounds", ":pipe sed -E 's/^(#{1,} )?/###### /'", "collapse_selection"]
# useful, but can we do these with standard ms* ms**?
i = [":pipe ~/.config/helix/helix-commands markdown italic"]
b = [":pipe ~/.config/helix/helix-commands markdown bold"]
s = [":pipe ~/.config/helix/helix-commands markdown strikethrough"]
"`" = [":pipe ~/.config/helix/helix-commands markdown backtick"]
h = [":pipe ~/.config/helix/helix-commands markdown link"]

# list creators, awkward, want something like this
o = ["split_selection_on_newline", "goto_first_nonwhitespace", ":insert-output printf '1. '", "rotate_selections_backward", 'keep_primary_selection', "collapse_selection", "goto_line_end"]
q = ["split_selection_on_newline", "goto_first_nonwhitespace", ":insert-output printf '> '", "rotate_selections_backward", 'keep_primary_selection', "collapse_selection", "goto_line_end"]
u = ["split_selection_on_newline", "goto_first_nonwhitespace", ":insert-output printf -- '- '", "rotate_selections_backward", 'keep_primary_selection', "collapse_selection", "goto_line_end"]
t = ["split_selection_on_newline", "goto_first_nonwhitespace", ":insert-output printf -- '- [ ] '", "rotate_selections_backward", 'keep_primary_selection', "collapse_selection", "goto_line_end"]

[editor]
cursorline = true
color-modes = true
bufferline = "always"
text-width = 100

[editor.soft-wrap]
enable = true
max-wrap = 25
max-indent-retain = 16
wrap-indicator = ""

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = false

[editor.whitespace.render]
space = "none"
tab = "all"
newline = "none"

[editor.indent-guides]
render = true

[editor.gutters]
layout = ["diff", "diagnostics", "line-numbers", "spacer"]

[editor.lsp]
display-messages = true # progress on statusbar

# ---------------------------------------------------------
# KEYS
# ---------------------------------------------------------

# NB: cross reference binds with command palette (S-?)
# Nice to document what we are replacing here for future you.

[keys.select]
# word movement as in shell and normal mode
# Alt-{left,right,up,down} for syntax based movement in zellij locked
"C-left" = "extend_prev_word_end"
"C-S-left" = "extend_prev_long_word_start"
"C-right" = "extend_next_word_end"
"C-S-right" = "extend_next_long_word_end"
"C-down" = ["half_page_down", "goto_window_center"]
"C-up" = ["half_page_up", "goto_window_center"]
"C-S-down" = ["page_down", "goto_window_center"]
"C-S-up" = ["page_up", "goto_window_center"]

# alternates for Alt-{arrows}, C-{FRST} (colemak esdf)
"C-f" = "select_prev_sibling" # default: no_op
"C-r" = "shrink_selection" # default: save_selection
"C-s" = "select_next_sibling" # default: no_op
"C-t" = "expand_selection" # default: page_down

[keys.insert]
# home/end replacement (added to both insert/normal):
"C-e" = ["goto_line_end", "move_char_right"]
"C-a" = "goto_line_start"

# line killing is more complicated:
#Alt-backspace = "kill_to_line_start" # works on mac, but then we lose word backward delete
#S-backspace = "delete_word_backward" # all other backspace variants fail on mac
# so we just rely on default C-u or C-k to delete to start or end of line:
#"C-u" = "kill_to_line_start" # default
#"C-k" = "kill_to_line_end" # default

[keys.normal]
esc = ["collapse_selection", "keep_primary_selection"] # comma is awkward for removing multi-caret
"," = "no_op" # default: keep_primary_selection
# home/end replacement (interferes with increment/decrement):
"C-e" = ["goto_line_end", "move_char_right"]
"C-a" = "goto_line_start" # previous: increment (decrement on C-x reclaimed by save_selection)

# select + search word under cursor (then use n or p - visual for multi) - basically A-up in select + *
"`" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection"] # previous: switch_to_lowercase
"A-`" = "no_op" # previous: switch_to_uppercase
# NB: S-` (~) is toggle switch_case

# replacement for A-minus (clashes with zellij)
"h" = "flip_selections" # unbound by colemak

# rebind some alt based keys to ctrl to avoid zellij clashes
"A-u" = "no_op" # previous: earlier
"A-U" = "no_op" # previous: later
"A-!" = "no_op" # previous: shell_apend_output

# word movement as in shell
# On mac, unbind all native keys (except ^-space for spotlight)
"C-left" = "move_prev_word_end"
"C-S-left" = "move_prev_long_word_start"
"C-right" = "move_next_word_end"
"C-S-right" = "move_next_long_word_end"
"C-down" = ["half_page_down", "goto_window_center"]
"C-up" = ["half_page_up", "goto_window_center"]
"C-S-down" = ["page_down", "goto_window_center"]
"C-S-up" = ["page_up", "goto_window_center"]
# TODO: ^ movement keys should be listed in keys.normal.z for consistency (the old keys are listed there as a helpful reminder - but it's wrong in our case)

# A-{arrows} use sibling/hierarchical selection gotos BUT
# zellij locked mode required (C-g toggle)
# See https://github.com/zellij-org/zellij/issues/735
# We thus map them to FRST (ASDF-shift-right on colemak):
"C-f" = "select_prev_sibling" # default: no_op
"C-r" = "shrink_selection" # default: save_selection
"C-s" = "select_next_sibling" # default: no_op
"C-t" = "expand_selection" # default: page_down
# and unbind the other variants (to avoid cluttering commands)
"A-i" = "no_op" # default: shrink_selection
"A-o" = "no_op" # default: expand_selection
"A-n" = "no_op" # default: select_next_sibling
"A-p" = "no_op" # default: select_prev_sibling

# Selection saving and jumping
"C-b" = "no_op" # default: page_up
"C-d" = "no_op" # default: half_page_down - using for zellij tab
"C-u" = "no_op" # default: half_page_up
"C-x" = "save_selection" # default: decrement
#"C-i" = "jump_forward" # default
#"C-o" = "jump_backward" # default

# experiments
#S = "surround_add" # unfortunately cannot chain with something
M = ["collapse_selection", "select_mode", "match_brackets", "exit_select_mode"]
#"C-down" = ["extend_to_line_bounds", "search_selection", "delete_selection", "move_line_down", "paste_before", "move_line_up", "goto_line_end", "search_next"]
#"C-up" = ["extend_to_line_bounds", "search_selection", "delete_selection", "move_line_up", "paste_before", "move_line_up", "goto_line_end", "search_next"]

# ---------------------------------------------------------
# COLEMAK DISABLING
# ---------------------------------------------------------

# disable hjkl because colemak; neio is the equivalent colemak, but don't want to shift everything around..

#h = "no_op" # default: move_char_left - reclaimed above
j = "no_op" # default: move_visual_line_down
k = "no_op" # default: move_visual_line_up
l = "no_op" # default: move_char_right

[keys.normal.g]
h = "no_op"
j = "no_op"
l = "no_op"
k = "no_op"

[keys.normal.z]
j = "no_op"                   # default: scroll_down
k = "no_op"                   # default: scroll_up

[keys.normal.space.w]
h = "no_op"                   # default: jump_view_left
j = "no_op"                   # default: jump_view_down
k = "no_op"                   # default: jump_view_up
l = "no_op"                   # default: jump_view_right
H = "no_op"                   # default: swap_view_left
J = "no_op"                   # default: swap_view_down
K = "no_op"                   # default: swap_view_up
L = "no_op"                   # default: swap_view_right
C-h = "no_op"                 # default: jump_view_left
C-j = "no_op"                 # default: jump_view_down
C-k = "no_op"                 # default: jump_view_up
C-l = "no_op"                 # default: jump_view_right
[keys.normal.C-w]
h = "no_op"                   # default: jump_view_left
j = "no_op"                   # default: jump_view_down
k = "no_op"                   # default: jump_view_up
l = "no_op"                   # default: jump_view_right
H = "no_op"                   # default: swap_view_left
J = "no_op"                   # default: swap_view_down
K = "no_op"                   # default: swap_view_up
L = "no_op"                   # default: swap_view_right
C-h = "no_op"                 # default: jump_view_left
C-j = "no_op"                 # default: jump_view_down
C-k = "no_op"                 # default: jump_view_up
C-l = "no_op"                 # default: jump_view_right

# window
[keys.select.space.w]
h = "no_op"                   # default: jump_view_left
j = "no_op"                   # default: jump_view_down
k = "no_op"                   # default: jump_view_up
l = "no_op"                   # default: jump_view_right
C-h = "no_op"                 # default: jump_view_left
C-j = "no_op"                 # default: jump_view_down
C-k = "no_op"                 # default: jump_view_up
C-l = "no_op"                 # default: jump_view_right
H = "no_op"                   # default: swap_view_left
J = "no_op"                   # default: swap_view_down
K = "no_op"                   # default: swap_view_up
L = "no_op"                   # default: swap_view_right

#n = "hsplit_new"              # default: hsplit_new or vsplit_new menu

[keys.select.C-w]
h = "no_op"                   # default: jump_view_left
j = "no_op"                   # default: jump_view_down
k = "no_op"                   # default: jump_view_up
l = "no_op"                   # default: jump_view_right
C-h = "no_op"                 # default: jump_view_left
C-j = "no_op"                 # default: jump_view_down
C-k = "no_op"                 # default: jump_view_up
C-l = "no_op"                 # default: jump_view_right
H = "no_op"                   # default: swap_view_left
J = "no_op"                   # default: swap_view_down
K = "no_op"                   # default: swap_view_up
L = "no_op"                   # default: swap_view_right

