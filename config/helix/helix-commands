#!/usr/bin/env bash

# experiments
#
# best when surrounding single line substrings or cleanly delimited strings (with trailing newlines) as;
# - any excess newlines are stripped from helix :pipe
# - after :pipe, stuff is no longer aligned nicely on multiline replace

ccase_cmd() {
  local to=$1
  local text=$2
  result=$(ccase -t "${to}" "${text}")
  printf "%s" "$result"
}

md_cmd() {
  local action=$1
  local text=$2
  case $action in
    link)
      title="$(curl -fsSL "$text" | htmlq -t 'html head title')"
      printf "[%s](%s)" "$title" "$text"
      ;;
    bold)
      printf "**%s**" "$text"
      ;;
    italic)
      printf "*%s*" "$text"
      ;;
    strikethrough)
      printf "~~%s~~" "$text"
      ;;
    backtick)
      printf "\`%s\`" "$text"
      ;;
    code)
      echo -e "\`\`\`\n${text}\n\`\`\`"
      ;;
    untick)
      output="$(sd '\[.\]' '[ ]' <<< "$text")"
      printf "%s\n" "$output"
      ;;
    tick)
      output="$(sd '\[.\]' '[x]' <<< "$text")"
      printf "%s\n" "$output"
      ;;
    cancel)
      output="$(sd '\[.\]' '[~]' <<< "$text")"
      printf "%s\n" "$output"
      ;;
    *)
      printf "%s" "$text"
      ;;
  esac
}

category="$1"
case $category in
  md)
    action="$2"
    text=$(</dev/stdin)
    md_cmd "$action" "$text"
    ;;
  ccase)
    to="$2"
    text=$(</dev/stdin)
    ccase_cmd "$to" "$text"
    ;;
  *)
    ;;
esac
