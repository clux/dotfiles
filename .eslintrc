{
  "env": {                           // http://eslint.org/docs/user-guide/configuring.html#specifying-environments
    "browser": true,                 // browser global variables
    "node": true                     // Node.js global variables and Node.js-specific rules
  },

  "ecmaFeatures": {
    "arrowFunctions": true,
    "blockBindings": true,
    "classes": false,
    "defaultParams": false,
    "destructuring": true,
    //"forOf": true,
    "generators": true,
    "globalReturn": false,
    //"modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": false,
    //"objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    //"spread": true,
    //"superInFunctions": true,
    "templateStrings": true,
  },

  "rules": {
    "strict": [2, "never"],          // http://eslint.org/docs/rules/strict

    /**
     * ES6
     */
    //"no-var": 2,                     // http://eslint.org/docs/rules/no-var
    "prefer-const": 2,               // http://eslint.org/docs/rules/prefer-const

    /**
     * Variables
     */
    "no-shadow": 2,                  // http://eslint.org/docs/rules/no-shadow
    "no-shadow-restricted-names": 2, // http://eslint.org/docs/rules/no-shadow-restricted-names
    "no-unused-vars": [2, {          // http://eslint.org/docs/rules/no-unused-vars
      "vars": "local",
      "args": "after-used"
    }],
    "no-use-before-define": 2,       // http://eslint.org/docs/rules/no-use-before-define
    "no-cond-assign": [2, "always"], // http://eslint.org/docs/rules/no-cond-assign

    /**
     * Possible errors or bad practices
     */
    // disallow stuff that should not be left in production code
    "no-process-exit": 0,            // http://eslint.org/docs/rules/no-process-exit
    "no-console": 0,                 // http://eslint.org/docs/rules/no-console
    "no-debugger": 1,                // http://eslint.org/docs/rules/no-debugger
    "no-alert": 1,                   // http://eslint.org/docs/rules/no-alert
    "no-constant-condition": 1,      // http://eslint.org/docs/rules/no-constant-condition
    "no-empty": 2,                   // http://eslint.org/docs/rules/no-empty

    // stuff that's likely copy paste errors or pointlessness
    "no-dupe-keys": 2,               // http://eslint.org/docs/rules/no-dupe-keys
    "no-duplicate-case": 2,          // http://eslint.org/docs/rules/no-duplicate-case
    "no-sparse-arrays": 2,           // http://eslint.org/docs/rules/no-sparse-arrays
    "no-extra-boolean-cast": 0,      // http://eslint.org/docs/rules/no-extra-boolean-cast

    // stuff that's pretty much just done in error
    "no-ex-assign": 2,               // http://eslint.org/docs/rules/no-ex-assign
    "no-extra-semi": 2,              // http://eslint.org/docs/rules/no-extra-semi
    "no-func-assign": 2,             // http://eslint.org/docs/rules/no-func-assign
    "no-obj-calls": 2,               // http://eslint.org/docs/rules/no-obj-calls
    "no-inner-declarations": 2,      // http://eslint.org/docs/rules/no-inner-declarations
    // this is ok if used on a true hash like Object.create(null) so ignored
    //"guard-for-in": 2,               // http://eslint.org/docs/rules/guard-for-in

    // only allow proper whitespace (not hidden unicode stuff)
    "no-irregular-whitespace": 2,    // http://eslint.org/docs/rules/no-irregular-whitespace
    "no-invalid-regexp": 2,          // http://eslint.org/docs/rules/no-invalid-regexp
    
    // this doesn't enforce Number.isNaN over isNaN but it's a start:
    "use-isnan": 2,                  // http://eslint.org/docs/rules/use-isnan

    "block-scoped-var": 2,           // http://eslint.org/docs/rules/block-scoped-var

    /**
     * Best practices
     */
    // we allow == only against null and typeof (therefor do not enable no-eq-null)
    "eqeqeq": [2, "smart" ],         // http://eslint.org/docs/rules/eqeqeq
   
    // no arguments.callee/caller
    "no-caller": 2,                  // http://eslint.org/docs/rules/no-caller
    // no else after return in if
    "no-else-return": 2,             // http://eslint.org/docs/rules/no-else-return

    // no eval usage, implied eval usage (IE relic), or function constructors
    "no-eval": 2,                    // http://eslint.org/docs/rules/no-eval
    "no-implied-eval": 2,            // http://eslint.org/docs/rules/no-implied-eval
    "no-new-func": 2,                // http://eslint.org/docs/rules/no-new-func

    // no new usage without saving return value
    "no-new": 2,                     // http://eslint.org/docs/rules/no-new
    // no new on builtins that have literals
    "no-new-wrappers": 2,            // http://eslint.org/docs/rules/no-new-wrappers

    // warn when using bind and it's not actually needed
    "no-extra-bind": 2,              // http://eslint.org/docs/rules/no-extra-bind
    // no switch fallthrough
    "no-fallthrough": 2,             // http://eslint.org/docs/rules/no-fallthrough
    // all decimal must be prefixed by a number (even if number is 0.XX)
    "no-floating-decimal": 2,        // http://eslint.org/docs/rules/no-floating-decimal

    // dont use { as scope replacement } we have let now
    "no-lone-blocks": 2,             // http://eslint.org/docs/rules/no-lone-blocks
    // no functions created in a native loop
    "no-loop-func": 2,               // http://eslint.org/docs/rules/no-loop-func
    // no multiline string literals
    "no-multi-str": 2,               // http://eslint.org/docs/rules/no-multi-str

    // no reassigning values of builtins and globals
    "no-native-reassign": 2,         // http://eslint.org/docs/rules/no-native-reassign
    "no-extend-native": 2,           // http://eslint.org/docs/rules/no-extend-native
    // no reassigning parameter references
    "no-param-reassign": 1,          // http://eslint.org/docs/rules/no-param-reassign

    // no deprecated octals
    "no-octal": 2,                   // http://eslint.org/docs/rules/no-octal
    // no deprecated string escapes that should be replaced by unicode escapes
    "no-octal-escape": 2,            // http://eslint.org/docs/rules/no-octal-escape
    // no __proto__ usage
    "no-proto": 2,                   // http://eslint.org/docs/rules/no-proto

    // no double `var a`
    "no-redeclare": 2,               // http://eslint.org/docs/rules/no-redeclare
    // no return foo = bar + 2 (kind of like cond-assign)
    "no-return-assign": [2, "always"],  // http://eslint.org/docs/rules/no-return-assign

    // no eval style "javascript:code.." urls
    "no-script-url": 2,              // http://eslint.org/docs/rules/no-script-url
    // no pointless self-compare (only useful for isNaN, but we have Number.isNaN)
    "no-self-compare": 2,            // http://eslint.org/docs/rules/no-self-compare
    // no weird usage of the comma operator
    "no-sequences": 2,               // http://eslint.org/docs/rules/no-sequences
    // pass on new Error objects instead of throwing
    "no-throw-literal": 2,           // http://eslint.org/docs/rules/no-throw-literal
    // no using the terrible with statement
    "no-with": 2,                    // http://eslint.org/docs/rules/no-with
    // no using parseInt without base/radix param
    "radix": 2,                      // http://eslint.org/docs/rules/radix
    // ignore hoisting problems - will get warnings for use before declare anyway
    //"vars-on-top": 2,                // http://eslint.org/docs/rules/vars-on-top

    // encapsulate dog balls
    "wrap-iife": [2, "any"],         // http://eslint.org/docs/rules/wrap-iife

    // no yoda conditions since we disallow cond-assign anyway so use case is gone
    "yoda": [2, "never", {
      "exceptRange": true // except when we test if 0 < a && a < 5
    }],                              // http://eslint.org/docs/rules/yoda

    /**
     * Style
     */
    // always return things of same type when returning in a function
    "consistent-return": 2,          // http://eslint.org/docs/rules/consistent-return
    // always enforce curly braces for constrol structures
    "curly": [2, "all"],             // http://eslint.org/docs/rules/curly
    // always enforce default case in switch statements
    "default-case": 2,               // http://eslint.org/docs/rules/default-case
    // always use dot notation for key lookups when possible, even for keywords
    "dot-notation": [2, {            // http://eslint.org/docs/rules/dot-notation
      "allowKeywords": true
    }],

    // more style stuff that abnb calls style
    "indent": [2, 2],                // http://eslint.org/docs/rules/indent
    "brace-style": [2,               // http://eslint.org/docs/rules/brace-style
      "stroustrup", {
      "allowSingleLine": true
    }],
    "quotes": [
      2, "single", "avoid-escape"    // http://eslint.org/docs/rules/quotes
    ],
    // TODO: do I care about these?
    //"camelcase": [2, {               // http://eslint.org/docs/rules/camelcase
    //  "properties": "never"
    //}],
    //"comma-spacing": [2, {           // http://eslint.org/docs/rules/comma-spacing
    //  "before": true,
    //  "after": false
    //}],
    //"comma-style": [2, "first"],      // http://eslint.org/docs/rules/comma-style
    "eol-last": 2,                   // http://eslint.org/docs/rules/eol-last
    "func-names": 0,                 // http://eslint.org/docs/rules/func-names
    "key-spacing": [2, {             // http://eslint.org/docs/rules/key-spacing
        "beforeColon": false,
        "afterColon": true
    }],
    "new-cap": [2, {                 // http://eslint.org/docs/rules/new-cap
      "newIsCap": true
    }],
    "no-multiple-empty-lines": [2, { // http://eslint.org/docs/rules/no-multiple-empty-lines
      "max": 2
    }],
    //"no-nested-ternary": 2,          // http://eslint.org/docs/rules/no-nested-ternary
    "no-new-object": 2,              // http://eslint.org/docs/rules/no-new-object
    "no-spaced-func": 2,             // http://eslint.org/docs/rules/no-spaced-func
    "no-trailing-spaces": 2,         // http://eslint.org/docs/rules/no-trailing-spaces
    "no-extra-parens": 0,            // http://eslint.org/docs/rules/no-extra-parens
    "no-underscore-dangle": 0,       // http://eslint.org/docs/rules/no-underscore-dangle
    //"one-var": [2, "never"],         // http://eslint.org/docs/rules/one-var
    "padded-blocks": [2, "never"],   // http://eslint.org/docs/rules/padded-blocks
    "semi": [2, "always"],           // http://eslint.org/docs/rules/semi
    "semi-spacing": [2, {            // http://eslint.org/docs/rules/semi-spacing
      "before": false,
      "after": true
    }],
    "space-after-keywords": 2,       // http://eslint.org/docs/rules/space-after-keywords
    "space-before-blocks": 2,        // http://eslint.org/docs/rules/space-before-blocks
    "space-before-function-paren": [2, {
      "anonymous": "always",
      "named": "never" // stick to jshint rule that was commonly enforced
      // TODO: maybe last is not necessary
    }],                              // http://eslint.org/docs/rules/space-before-function-paren
    "space-infix-ops": 0,            // http://eslint.org/docs/rules/space-infix-ops
    "space-return-throw-case": 2,    // http://eslint.org/docs/rules/space-return-throw-case
    "spaced-comment": 2,             // http://eslint.org/docs/rules/spaced-comment
  }
}
