[alias]
  # COMMON
  s = status -s
  d = diff
  dn = "!f() { git --no-pager diff; }; f"
  ds = -c delta.side-by-side=true diff
  dc = diff --cached
  dcs = -c delta.side-by-side=true diff --cached
  dm = !"db() { git log -p $(git master)..HEAD; }; db"
  c = commit --signoff --verbose
  a = add
  p = pull
  f = fetch
  u = push
  ut = push --tags
  co = checkout
  nu = switch -c
  m = !"m() { git switch \"$(git master)\"; }; m"

  # fuzzy interactive helpers
  l = "!f() { source ~/.githelpers && gitlog; }; f"

  # OCCASIONAL
  amend = commit --amend
  ping = "!f() { git commit --signoff --allow-empty -m \"ping hooks - $(date +%Y-%m-%d)\"; }; f"
  uncommit = reset --soft HEAD^
  unstage = reset HEAD
  count = shortlog --summary --numbered --no-merges
  ps = !git pull --recurse-submodules && git submodule update --init --recursive
  chk = diff --cached --check
  stat = diff --stat
  root = rev-parse --show-toplevel
  ws = !"ws() { git commit --no-verify -m temp && git rebase --whitespace=fix HEAD^ && git uncommit; }; ws"
  pu = !"pu() { git branch --set-upstream-to=origin/$(git branch --show-current); }; pu"

  # Listers
  tags = tag -l
  branches = branch -a
  remotes = remote -v


  # BRANCH HELPERS
  # since github started changing the default master branch:
  master = !"master() { git remote show  origin | grep HEAD | choose 2; }; master"
  # checkout remote ref to a github pr
  # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally
  pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"
  # push a small tweak to a PR aggressively
  yolo = !git add -u && git commit --amend --no-edit && git push --force-with-lease

  # GC stuff
  # Merged branch delete
  prunebranch = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # MISC
  # add all untracked files to .gitignore
  untracked = ls-files --others --exclude-standard
  # ignore all untrackeds (if first time having gitignore, don't ignore that)
  ignore = !git untracked | grep -v .gitignore >> .gitignore && git add .gitignore
  # open github/github enterprise changesets in the browser
  open = "!f() { open \"https://$(echo $(git config --get remote.origin.url) | sed 's|^http.://||' | sed 's|^git@||' | tr : '/' | sed 's|.git$||')/commit/$1\"; }; f"
  # NB: ^ git remote get-url origin | sed 's/^git@\(.*\):\/*\(.*\).git/https:\/\/\1\/\2/' is easier but cannot get it to work inside gitconfig
  # reset to blank state
  
  wipe = "!f() { git reset --hard origin/$(git master) && git clean -fdX; }; f"
  # show orphaned commits
  orphans = !git log --all --max-parents=0
  # what are my aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

  # FINDERS
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # IDENTITY HELPERS
  ea = !git config --local user.name \"Eirik Albrigtsen\" && \
        git config --local user.email \"eirik.albrigtsen@truelayer.com\"
  clux = !git config --local user.name \"clux\" && \
          git config --local user.email \"sszynrae@gmail.com\"
  # set who i am on fresh clones (cd's into dirname and calls one of the above)
  idclone ="!f() { cd $(echo $2 | cut -d"/" -f2) && git $1 && cd -; }; f"
  whoami = !sh -c 'echo \"$(git config --get user.name) <$(git config --get user.email)>\"'

  # cloning and setting identities correctly (overrides includeIf defaults)
  github ="!f() { git clone git@github.com:$1.git && git idclone clux $1; }; f"
  gitlab ="!f() { git clone git@gitlab.com:$1.git && git idclone clux $1; }; f"
  bitbucket ="!f() { git clone git@bitbucket.org:$1.git && git idclone clux $1; }; f"
  work = "!f() { git clone git@github.com:$1.git && git idclone ea $1; }; f"
  aur = "!f() { git clone https://aur.archlinux.org/$1.git && git idclone clux $1; }; f"

  # clone from main account/org using personal identity (overrides includeIf defaults)
  hub ="!f() { git github clux/$i; }; f"
  lab ="!f() { git gitlab clux/$i; }; f"
  bb ="!f() { git bitbucket clux/$i; }; f"
  tl ="!f() { git work truelayer/$i; }; f"

  # initializing and setting identities correctly
  # usage: `git new ea` or `git new clux`
  initial ="!f() { [ -n "$1" ] && git $1 && git commit --allow-empty -m init; }; f"
  new ="!f() { [ ! -d ".git" ] && git init && git add . && git initial $1; }; f"


[user]
  # Ensure user info is set before committing
  useConfigOnly = true

; include for all repositories inside ~truelayer
[includeIf "gitdir:~/truelayer/"]
	path = ~/.gitconfig-tl.inc
; include for all repositories inside ~/repos and ~/kube
[includeIf "gitdir:~/repos/"]
	path = ~/.gitconfig-clux.inc
[includeIf "gitdir:~/kube/"]
	path = ~/.gitconfig-clux.inc

[push]
  default = current

[pull]
  ff = only

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[pager]
  diff = delta
  show = delta
  log = delta
  reflog = delta

[include]
  path = ~/repos/dotfiles/themes.git

[interactive]
  diffFilter = delta --color-only --features=interactive --hyperlinks

[delta]
  features = clux

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[diff]
  colorMoved = default

[checkout]
  defaultRemote = "origin"

[init]
  templatedir = ~/.templates/git
  defaultBranch = main

[core]
  hooksPath = ~/.templates/git/hooks

[credential]
	helper = store
