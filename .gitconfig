[alias]
  # COMMON
  s = status -s
  d = diff
  dc = diff --cached
  c = commit --verbose
  a = add
  p = pull
  f = push
  co = checkout
  nu = checkout -b

  # OCCASIONAL
  amend = commit --amend
  ping = "!f() { git commit --allow-empty -m \"ping hooks - $(date +%Y-%m-%d)\"; }; f"
  uncommit = reset --soft HEAD^
  unstage = reset HEAD
  count = shortlog --summary --numbered
  ps = !git pull --recurse-submodules && git submodule update --init --recursive
  chk = diff --cached --check
  stat = diff --stat
  rc = = clone --recursive
  top = rev-parse --show-toplevel

  # Listers
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # BRANCH HELPERS
  # since github started changing the default master branch:
  master = !"master() { git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'; }; master"
  m = !"m() { git checkout \"$(git master)\"; }; m"
  db = !"db() { git log -p $(git master)..HEAD; }; db"
  # push a small tweak to a PR
  yolo = !git add -u && git  commit --amend --no-edit && git push -f
  # Merged branch delete
  md = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  prune = fetch --prune --all
  pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

  # MISC
  # add all untracked files to .gitignore
  untracked = ls-files --others --exclude-standard
  # ignore all untrackeds (if first time having gitignore, don't ignore that)
  ignore = !git untracked | grep -v .gitignore >> .gitignore && git add .gitignore
  # open github/github enterprise changesets in the browser
  open = "!f() { xdg-open \"https://$(echo $(git config --get remote.origin.url) | sed 's|^http.://||' | sed 's|^git@||' | tr : '/' | sed 's|.git$||')/commit/$1\"; }; f"
  # reset to blank state
  wipe = "!f() { git reset --hard origin/$(git master) && git clean -fdX; }; f"
  # remove whitespace from your things
  ws = "!git rebase --whitespace=fix --onto $(git merge-base HEAD @{u})"
  # what are my aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

  # FINDERS
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # IDENTITY
  ea = !git config --local user.name \"Eirik Albrigtsen\" && \
        git config --local user.email \"eirik.albrigtsen@truelayer.com\"
  clux = !git config --local user.name \"clux\" && \
          git config --local user.email \"sszynrae@gmail.com\"
  # set who i am on fresh clones (cd's into dirname and calls one of the above)
  idclone ="!f() { cd $(echo $2 | cut -d"/" -f2) && git $1 && cd -; }; f"
  whoami = !sh -c 'echo \"$(git config --get user.name) <$(git config --get user.email)>\"'
  cluxremote = "!f() { git remotes set-url origin $(git remotes get-url origin | sed -e s/github.com:/github.com-clux:/); }; f"

  # shortcuts for cloning and setting identities correctly
  github ="!f() { git clone git@github.com-clux:$1.git && git idclone clux $1; }; f"
  gitlab ="!f() { git clone git@gitlab.com:$1.git && git idclone clux $1; }; f"
  bitbucket ="!f() { git clone git@bitbucket.org:$1.git && git idclone clux $1; }; f"
  work = "!f() { git clone git@github.com-work:$1.git && git idclone ea $1; }; f"
  aur = "!f() { git clone https://aur.archlinux.org/$1.git && git idclone clux $1; }; f"

  # multi-clone shortcuts
  hub ="!f() { for i in $@; do git github clux/$i; done; }; f"
  lab ="!f() { for i in $@; do git gitlab clux/$i; done; }; f"
  bb ="!f() { for i in $@; do git bitbucket clux/$i; done; }; f"
  tl ="!f() { for i in $@; do git work truelayer/$i; done; }; f"

  # initializing and setting identities correctly
  # usage: `git new ea` or `git new clux`
  initial ="!f() { [ -n "$1" ] && git $1 && git commit --allow-empty -m init; }; f"
  new ="!f() { [ ! -d ".git" ] && git init && git add . && git initial $1; }; f"

[user]
  signingkey = 0xA876A6CD26914D42

[push]
  # Allow you to push with `git push -u` first time on a new branch
  default = current

[pull]
  ff = only

[pager]
  diff = /usr/share/git/diff-highlight/diff-highlight | less
  show = /usr/share/git/diff-highlight/diff-highlight | less
  log = /usr/share/git/diff-highlight/diff-highlight | less
  #diff = delta
  #show = delta
  #log = delta

[interactive]
  diffFilter = /usr/share/git/diff-highlight/diff-highlight
  #diffFilter = delta --color-only

[delta]
  # NB: delta does not work well with colorMoved yet, therefore it is commented out for now
  # maybe in the next cargo install git-delta -f
  features = decorations
  whitespace-error-style = 22 reverse
  syntax-theme = 1337

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[diff]
  colorMoved = plain
  noprefix = true

[color "diff"]
  # NB: These interplay with delta, remove first 4 when testing delta
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
  newMoved = "#b8f8b8"
  oldMoved = "#f8b8b8"

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[init]
  templatedir = ~/.templates/git
  defaultBranch = master

[core]
  hooksPath = ~/.templates/git/hooks
