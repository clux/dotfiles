#!/bin/bash

# -----------------------------------------------------------------------------
# helpers to search through specific file types
filefind() { find "$1" -type f -name "$2" 2> /dev/null ;}

# JS files
jf() { filefind "$@" "*.js" | grep -vE "node_modules|bower_components|\.min" ;}
js() { jf "$1" | xargs grep "$2" 2> /dev/null ;}

# markdowns
mf() { filefind "$@" "*.md" | grep -vE "node_modules|bower_components" ;}
ms() { mf "$1" | xargs grep "$2" 2> /dev/null ;}

# C++ files
cf() { find "$@" -type f -name "*.cpp" -o -name "*.h" -o -name "*.c" 2> /dev/null ;}
cs() { cf "$1" | xargs grep "$2" 2> /dev/null ;}
hf() { filefind "$@" "*.h" ;}
hs() { hf "$1" | xargs grep "$2" 2> /dev/null ;}

# CMakeLists from PWD
srchcmake() { filefind . "CMakeLists.txt" | xargs grep "$1" 2> /dev/null ;}

# -----------------------------------------------------------------------------
# misc

# Create a new directory and enter it
mkd() { mkdir -p "$@" && cd "$@" || return 1 ;}

# package/repo fetching shortcuts
aptin() { sudo apt-get install "$1" ;}
aptrem() { sudo apt-get remove "$1" ;}
ghclone() { git clone git@github.com:clux/"$1".git ;}
bbclone() { git clone git@bitbucket.org:clux/"$1".git ;}


json-validate() { jsonlint package.json -q ;}

# -----------------------------------------------------------------------------
# scaffolding from templates folder

node-init() {
  find ~/.templates/npm/ -not -type d -not -iname pkg.json -exec cp {} "$PWD" \;
  pkginit
  echo "# $(basename "$PWD")" > README.md
  badgify >> README.md
}

# -----------------------------------------------------------------------------
# documentation generation for gh-pages

rust-doc-update() {
  cargo doc
  local -r repo=$(basename "$PWD")
  echo "<meta http-equiv=refresh content=0;url=$repo/index.html>" > target/doc/index.html
  ghp-import -n target/doc
  git push -qf "git@github.com:clux/$repo.git" gh-pages
}

polymer-doc-update() {
  if [ ! -d demo ]; then
    echo "No demo directory found"
    return
  fi
  local -r repo="$(basename "$PWD")"
  mkdir "components/$repo" -p
  cp demo/* "components/$repo"
  find -maxdepth 1 -type f -exec cp {} "components/$repo/" \;
  cp bower_components/* components/ -R
  echo "<meta http-equiv=refresh content=0;url=$repo/index.html>" > components/index.html
  ghp-import -n components
  git push -qf "git@github.com:clux/${repo}.git" gh-pages
}

# -----------------------------------------------------------------------------

# insert xkcd tar joke here
extract () {
  if [ -f "$1" ] ; then
      case "$1" in
          *.tar.bz2)   tar xvjf "$1"    ;;
          *.tar.gz)    tar xvzf "$1"    ;;
          *.bz2)       bunzip2 "$1"     ;;
          *.rar)       unrar x "$1"     ;;
          *.gz)        gunzip "$1"      ;;
          *.tar)       tar xvf "$1"     ;;
          *.tbz2)      tar xvjf "$1"    ;;
          *.tgz)       tar xvzf "$1"    ;;
          *.zip)       unzip "$1"       ;;
          *.Z)         uncompress "$1"  ;;
          *.7z)        7z x "$1"        ;;
          *)           echo "unknown extension for '$1'" ;;
      esac
  else
      echo "$1 is not a valid file!"
  fi
}
# usage: ball output [inputs]
ball () { tar czf "$1.tar" "${@:2}" ;}

# -----------------------------------------------------------------------------
# movie management

movies-diff () {
  diff -u <(ls /media/clux/TOOL/MP4/Movies/) <(ls /media/clux/Zorn/NewMP4/BluRay/)
}

# usage: broxy_download after having copied a magnet to clipboard
broxy-download () {
  # shellcheck disable=SC2029
  ssh broxy ./brotorr/torrent "\"$(xclip -o -sel clip)\""
}

broxy-check() {
  ssh broxy ls dumptruck/DL
}

# TODO: get some more helpers to find new stuff in other directories based on mtime

# usage: `broxy_fetch name` where name is a substring from broxy_check
broxy-fetch() {
  local -r rs=$(ssh broxy ./list_downloads.sh | grep "$1")
  test -n "$rs" || echo "No grep results for $1"
  local -r fldr=$(echo "$rs" | cut -d '/' -f 6)
  test -n "$fldr" || echo "Invalid folder for $rs"
  if [ -n "$fldr" ]; then
    echo "Downloading $fldr"
    rsync -cahzP -e ssh "broxy:$rs" .
    alert
  fi
}

# -----------------------------------------------------------------------------

# Get colors in manual pages
man() {
  env \
    LESS_TERMCAP_mb="$(printf "\e[1;31m")" \
    LESS_TERMCAP_md="$(printf "\e[1;31m")" \
    LESS_TERMCAP_me="$(printf "\e[0m")" \
    LESS_TERMCAP_se="$(printf "\e[0m")" \
    LESS_TERMCAP_so="$(printf "\e[1;44;33m")" \
    LESS_TERMCAP_ue="$(printf "\e[0m")" \
    LESS_TERMCAP_us="$(printf "\e[1;32m")" \
    man "$@"
}
