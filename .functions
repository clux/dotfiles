#!/bin/bash

# -----------------------------------------------------------------------------
# helpers to search through specific file types

# find file under pwd - v `fs main.yml`
fs() { find . -type f -name "$1" 2> /dev/null ;}
# find file anywhere - v `ff roles main`
ff() { find "$1" -type f -name "$2" 2> /dev/null ;}

tre() {
  tree -aC -I "node_modules|target|site-packages|.git|bower_components|venv" --dirsfirst "$@" | less -FRX
}

# JS files
jf() { ff "$@" "*.js" | grep -vE "node_modules|bower_components|\.min" ;}
js() { jf "$1" | xargs grep -s "$2" ;}

# RS files
rf() { ff "$@" "*.rs" ;}
rs() { rf "$1" | xargs grep -s "$2" ;}

# PY files
pyf() { ff "$@" "*.py" | grep -vE "site-packages|node_modules|venv|.eggs" ;}
pys() { pyf "$1" | xargs grep -s "$2" ;}

# C++ files
cf() { find "$@" -type f -name "*.cpp" -o -name "*.h" -o -name "*.c" 2> /dev/null ;}
cs() { cf "$1" | xargs grep -s "$2" ;}
hf() { ff "$@" "*.h" ;}
hs() { hf "$1" | xargs grep -s "$2" ;}

# CMakeLists from PWD
srchcmake() { ff . "CMakeLists.txt" | xargs grep -s "$1" ;}

# -----------------------------------------------------------------------------
# opening helpers

# vim
v() {
  if [ $# -eq 0 ]; then
    vim "$(fzf)"
  else
    vim "$@"
  fi
}
# sublime
sub() {
  if [ $# -eq 0 ]; then
    subl3 "$(fzf)"
  else
    subl3 "$@"
  fi
}


# chrome history
ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if hash google-chrome-stable 2> /dev/null; then
    cp -f ~/.config/google-chrome/Default/History /tmp/h
  else
    cp -f ~/.config/chromium/Default/History /tmp/h
  fi

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
}

# xdg-open
o() {
  if [ $# -eq 0 ]; then
    xdg-open .  > /dev/null 2>&1
  else
    xdg-open "$@" > /dev/null 2>&1
  fi
}

openimage() {
  local types='*.jpg *.JPG *.png *.PNG *.gif *.GIF *.jpeg *.JPEG'

  cd "$(dirname "$1")" || true
  local -r file=$(basename "$1")

  # shellcheck disable=SC2086
  feh -q $types --auto-zoom \
    --sort filename --borderless \
    --scale-down --draw-filename \
    --image-bg black \
    --start-at "$file"
}

# veracrypt shortcuts
vco() {
  sudo echo "got sudo" # cache sudo first
  # For some reason the below cmd does not work without non-interactive in text mode
  veracrypt -t --mount /dev/sdc1 --slot=1 --verbose -p "$(pass drives/turing)" --non-interactive
  export HISTFILE=/dev/null
  cd /media/veracrypt1 || false
}
vcc() {
  cd || true
  veracrypt --text --dismount /dev/sdc1 && exit
}

# -----------------------------------------------------------------------------
# package manager abstraction - mostly for my own memory

if grep -q "Arch Linux" /etc/os-release; then
  # list available packages:
  paks() { pacman -Ss "$1" ;}
  # list locally installed packages:
  pakl() { pacman -Qs "$1" ;}
  # what package owns local file:
  pakf() { pacman -Qo "$1" ;}
  # what package owns a file you don't have:
  pakq() { pacman -Fs "$1"; } # may need a pacman -Fy first
  # list files belonging to a package:
  qlist() { pacman -Ql "$1" ;}
  # install a package:
  paki() { sudo pacman -S "$1" ;}
  # remove a package and its dependencies recursively:
  pakr() { sudo pacman -Rs "$1" ;}
  # list available updates to installed packages:
  #canonical checkupdates
elif grep -qE "Ubuntu|Mint" /etc/os-release; then
  paks() { apt-cache search "$1"; }
  # the easier ones for this all perform network queries..
  pakl() { dpkg --get-selections | grep -v deinstall | awk '{ printf("%s\n", $1) }' | grep "$1" ;}
  pakf() { dpkg -S "$1" ;}
  pakq() { apt-file search "$1" ;} # needs apt-file installed + `apt-file update` called
  qlist() { dpkg-query -L "$1" ;}
  paki() { sudo apt-get install "$1" ;}
  pakr() { sudo apt-get remove "$1" ;}
elif lsb_release -ds | grep -qEi "Gentoo"; then
  paks() { eix -c "$1" ;}
  pakf() { equery belongs "$1" ;}
  # canonical qlist
  paki() { sudo emerge "$1" ;}
  pakr() { sudo emerge -cav "$1" ;}
  checkupdates() { eix -uc "$1" ;}
elif hash yum 2> /dev/null; then
  paks() { yum search "$1" ;}
  pakf() { yum whatprovides "$1" ;}
  qlist() { repoquery --list "$1" ;} # from yum-utils
  paki() { sudo yum install "$1" ;}
  pakr() { sudo yum remove "$1" ;}
fi

# -----------------------------------------------------------------------------
# systemd

follow() {
  local -r unit="$1"
  journalctl -u "$unit" -fl | ccze
}
_follow() {
  local cur
  _init_completion || return
  local -r units="$(systemctl list-units --no-pager --no-legend | awk '{ print $1 }')"
  COMPREPLY=($(compgen -W "$units" -- "$cur"))
}
complete -F _follow follow

reload() {
  local -r unit="$1"
  sudo systemctl daemon-reload
  sudo systemctl restart "$unit"
}

# -----------------------------------------------------------------------------
# git

glscommand() {
  local -r dirs=$(find . -maxdepth 1 -mindepth 1 -type "d")
  local -r command="$1"
  dir=$PWD
  for d in $dirs; do
    cd "$d" || false
    echo -en "$(tput setaf 33)${d:2} "
    if [[ -d .git ]]; then
      echo -en "$(tput setaf 136)$(${command})$(tput sgr0)"
    fi
    echo
    cd ..
  done
  cd "$dir" || true
}

# ls | git prompt
gls() { glscommand "show_git_differences" ;}
# ls | git whoami
glsd() { glscommand "git whoami" ;}

# -----------------------------------------------------------------------------
# misc

# attach to fresh tmux session based on guake index
guake-exec-tmux() {
  which tmux > /dev/null || return 0
  if [[ $PPID == $(pgrep -f guake) ]]; then
    guakeIndex=$(guake -g)
    if tmux list-sessions | cut -d':' -f1 | grep -q "$guakeIndex"; then
      # use one of the preconfigured sessions
      exec tmux attach-session -t "$guakeIndex"
    else
      exec tmux new-session
    fi
  fi
}

zz() {
  guake --rename-tab="${PWD##*/}" -i "$(guake -g)"
}
zzh() {
  guake --rename-tab="$1" -i "$(guake -g)"
  # shellcheck disable=SC2068
  ssh $@
}

# Create a new directory and enter it
mkd() { mkdir -p "$@" && cd "$@" || return 1 ;}

kill-tabs() { pkill -u "$USER" -f "chrome.*renderer" ;}

# convert yaml to json:
# yaml file
# yaml file [json key/args]
yaml() {
  if [ -n "$2" ]; then
    # shellcheck disable=SC2068
    js-yaml "$1" | json $@
  else
    js-yaml "$1"
  fi
}

# override monitor refresh rate
# super meat boy: refresh-rate 60
# everything else: refresh-rate 144
refresh-rate() {
  local -r rate="${1-144}"
  if [[ $(hostname) = kjttks ]]; then
    # Main screen refresh rate
    xrandr --output DVI-I-1 --mode 1920x1080 --rate "$rate"
    xrandr -q | grep -E "$rate\.00\*"
  fi
}

docker-clean() {
  docker ps -aq | xargs -r docker rm -f
  docker images -q -f="dangling=true" | xargs -r docker rmi -f
}

musl-cross() {
  cross build --target x86_64-unknown-linux-musl --release --verbose
}
musl-build() {
  docker run \
    -v cargo-cache:/root/.cargo \
    -v "$PWD:/volume" -w /volume \
    --rm -it clux/muslrust cargo build --release
}

serve() {
  python -m http.server 8000
}

# upload a single file in PWD to transfer.sh
transfer() {
  curl --upload-file "$1" "https://transfer.sh/$1" | xclip -sel clip
}
ruby-env() {
  local -r gemdir="$(ruby -e 'print Gem.user_dir')"
  export PATH="${gemdir}/bin:$PATH"
}

banish-daemons() {
  sudo systemctl stop docker
  sudo systemctl stop postgresql
  pm2 kill
}

steam-safe() {
  export __GL_SYNC_TO_VBLANK=0
  export __GLVND_DISALLOW_PATCHING=1 # This was for TF2, may no longer be necessary
  steam-native
}

steam-mesa() {
  # shellcheck disable=SC2016
  LD_PRELOAD='/usr/$LIB/libstdc++.so.6 /usr/$LIB/libgcc_s.so.1 /usr/$LIB/libxcb.so.1 /usr/$LIB/libgpg-error.so' steam
}

q3() {
  set -x
  # Get most of quake3 from https://aur.archlinux.org/quake3-cpma.git (not pak0.pk3)
  export __GL_SYNC_TO_VBLANK=0
  # Need alsa-oss package and need to enable oss kernel modules
  sudo modprobe snd_seq_oss
  sudo modprobe snd_pcm_oss
  sudo modprobe snd_mixer_oss
  # Find correct card by looking in /proc/asound/cards
  # Mine jumps around, but its identifier is STX (Asus Xonar STX) - map to number:
  local -r cardid=$(grep STX /proc/asound/cards | awk '{print $1}')
  # Give DMA Access
  # NB: If you screw with this badly and it doesn't work, boot.
  echo "quake3.x86 0 0 direct" | sudo tee "/proc/asound/card${cardid}/pcm0p/oss"
  echo "quake3.x86 0 0 disable" | sudo tee "/proc/asound/card${cardid}/pcm0c/oss"
  # Have "seta snddevice /dev/dsp${cardid}" in your q3config.cfg
  # Or use this start command twice (for some reason it doesn't take first start)
  aoss quake3-cpma +"seta snddevice /dev/dsp${cardid}"
  # Do not open chrome and start playing music in the background
  # First sound you hear after boot should be quake
}


hr() {
  local -r COLS=$(tput cols)
  local -r SEP="*"
  local HR=''
  while (( ${#HR} < COLS )); do
      HR="$HR$SEP"
  done
  echo "$(tput setaf 33)${HR:0:$COLS}$(tput sgr0)"
}

# -----------------------------------------------------------------------------
# system statistics/usage

mem() {
  free -t | grep Mem | awk '{ printf("%3.1f%%\n", $3*100/$2)}'
}
disk() {
  # Total usage of currently mounted logical drives
  df -l --total \
    | grep total \
    | awk '{printf("%3.1f%%\n", $3*100/$2)}'
}
cpu() { awk '{printf("%3.1f%%\n", $1*100/'"$(nproc)"') }' < /proc/loadavg ;}

iface() {
  # first interface with state UP
  ip link show | grep "state UP" | awk '{print $2}' | cut -d':' -f1 | head -n 1
}
network() {
  # transferred numbers are in first column, print everything with space separation
  local -r netdata=$(ip -s link show "$(iface)" | awk -v ORS=" " '{ print $1 }')
  # convert relevant numbers to gigabytes
  local -r RX=$(echo "$netdata" | cut -d" " -f4 | awk '{printf("%3.1fGB\n", $1/1073741824)}')
  local -r TX=$(echo "$netdata" | cut -d" " -f6 | awk '{printf("%3.1fGB\n", $1/1073741824)}')
  echo -e "Sent: ${TX}\nRecv: ${RX}"
}

localip() {
  ip addr show "$(iface)" | grep inet | awk '{ print $2 }'
}

# process tree
#
# pstree :: simple tree hiding kernel workers
# pstree f :: full tree
# pstree u [user] :: user tree for $USER or passed in user
pstree() {
  local -r full=$([ "$1" = "f" ] && echo "1")
  local usr=""
  if [ "$1" = "u" ]; then
    usr=$([ -n "$2" ] && echo "$2" || echo "$USER")
  fi
  local flags=""
  if [ -n "$full" ]; then
    flags="-e -o cputime,pid,user,args"
  elif [ -n "$usr" ]; then
    flags="U $usr -o cputime,pid,args"
  else
    # Simple multi-user, filtering away PPID 2
    flags="--ppid 2 --deselect -o cputime,pid,user,args"
  fi
  # shellcheck disable=SC2086
  ps $flags --forest --width $(($(tput cols)-1)) | ccze -A | less -RX
  # NB: the -1 is to compensate for what ccze puts in there
}

# -----------------------------------------------------------------------------
# http helpers

# http method url ['{json}']
http() {
  local -r method="${1^^}"
  if [[ $method =~ POST|PUT ]]; then
    jsondata=$(echo "-H Content-Type:application-json -d \"$3\"")
  fi
  echo curl -X "$method $2 ${jsondata}"
}

# -----------------------------------------------------------------------------
# scaffolding from templates folder

node-init() {
  find ~/.templates/npm/ -not -type "d" -exec cp {} "$PWD" \;
  pkginit
  local -r dir="$(basename "$PWD")"
  echo "# $dir" > README.md
  badgify >> README.md
  sed "s/BASENAME/$dir/g" readme.md >> README.md
  rm readme.md
}

cargo-init() {
  find ~/.templates/cargo/ -not -type "d" -exec cp {} "$PWD" \;
  # TODO: replace mycrate with basename
  #local -r dir="$(basename "$PWD")"
}

# -----------------------------------------------------------------------------
# misc node

node-deopts() {
  # shellcheck disable=SC2068
  node --trace_opt --trace_deopt --allow-natives-syntax $@
}

node-deps() {
  npm ls | grep -oE "[[:alnum:]\@\.]*" | sort -u
}

# -----------------------------------------------------------------------------
# documentation generation for gh-pages

# Do this AFTER bumping version in Cargo.toml and cargo package && cargo publish
rust-doc-update() {
  cargo doc
  local -r repo=$(basename "$PWD")
  echo "<meta http-equiv=refresh content=0;url=$repo/index.html>" > target/doc/index.html
  ghp-import -n target/doc
  git push -qf "git@github.com:clux/$repo.git" gh-pages
}

rust-doc-view() {
  cargo doc
  local -r repo=$(basename "$PWD")
  xdg-open "target/doc/$repo/index.html"
}

# -----------------------------------------------------------------------------
# more rust

rust-muslbuild() {
  docker run -v "$PWD:/volume" -w /volume -t clux/muslrust cargo build --release
  sudo chown "$USER" -R target
}

# -----------------------------------------------------------------------------
# extraction shortcuts

# insert xkcd tar joke here
extract () {
  if [ -f "$1" ] ; then
      case "$1" in
          *.tar.bz2)   tar xvjf "$1"    ;;
          *.tar.gz)    tar xvzf "$1"    ;;
          *.bz2)       bunzip2 "$1"     ;;
          *.rar)       unrar x "$1"     ;;
          *.gz)        gunzip "$1"      ;;
          *.tar)       tar xvf "$1"     ;;
          *.tbz2)      tar xvjf "$1"    ;;
          *.tgz)       tar xvzf "$1"    ;;
          *.zip)       unzip "$1"       ;;
          *.Z)         uncompress "$1"  ;;
          *.7z)        7z x "$1"        ;;
          *)           echo "unknown extension for '$1'" ;;
      esac
  else
      echo "$1 is not a valid file!"
  fi
}
# ball: output [inputs]
ball () { tar czf "$1.tar" "${@:2}" ;}
# 7zsplit output [inputs]
7zsplit() { 7z a "$1.7z" -mx0 -V500M "${@:2}" ;}

# -----------------------------------------------------------------------------
# Broxy + brotorr integrations

dl() { cd "$DOWNLOAD_DIR" || return 1 ;}

movies-diff () {
  diff -u <(ls /media/clux/TOOL/MP4/Movies/) <(ls /media/clux/Zorn/NewMP4/BluRay/)
}

# xdg-mime handler
broxy-download () {
  # shellcheck disable=SC2029
  ssh broxy "source ~/.path; source ~/.exports; ./brotorr/torrent \"$1\""
}

# Find flags for helpers
broxy-findflags() {
  echo -e "-not -name '.*' -not -regex '.*Trash.*' -not -name tmp -printf '%p\n'"
}
broxy-dirflags() { echo -e "-mindepth $1 -maxdepth $1 -type d" ;}

# Everything in DL - usually fetch from here
broxy-check() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck/DL && find . $(broxy-dirflags 1) $(broxy-findflags)"
}

# Everything
broxy-all() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck && find . $(broxy-dirflags 2) $(broxy-findflags)"
}

# Everything from last month
broxy-latest() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck && find . $(broxy-dirflags 2) -mtime -31 $(broxy-findflags)"
}

# Grab from broxy with a pattern with confirmation
broxy-grab() {
  local -r rs=$(broxy-all | grep "$1")
  echo "Will download:"
  echo "$rs"
  read -rp "Enter to continue.."
  echo "Starting download"
  echo "$rs" | while read -r line; do
    fldr=$(echo "$line" | cut -d '/' -f2-)
    echo "Downloading $fldr"
    rsync -cahzP -e ssh "broxy:/home/bro/dumptruck/$fldr" .
  done
  notify-send "completed download of $1"
}

# -----------------------------------------------------------------------------
# Publishing helpers

npm-patch() {
  npm version patch && git push && git push --tags && npm publish
}
npm-minor() {
  npm version minor && git push && git push --tags && npm publish
}
npm-major() {
  npm version major && git push && git push --tags && npm publish
}
