#!/bin/bash

# -----------------------------------------------------------------------------
# helpers to search through specific file types
filefind() { find "$1" -type f -name "$2" 2> /dev/null ;}
lstree() { tree -aC -I "node_modules|.git"  --dirsfirst "$@" | less -R ;}

# JS files
jf() { filefind "$@" "*.js" | grep -vE "node_modules|bower_components|\.min" ;}
js() { jf "$1" | xargs grep "$2" 2> /dev/null ;}

# markdowns
mf() { filefind "$@" "*.md" | grep -vE "node_modules|bower_components" ;}
ms() { mf "$1" | xargs grep "$2" 2> /dev/null ;}

# PY files
pyf() { filefind "$@" "*.py" ;}
pys() { pyf "$1" | xargs grep "$2" 2> /dev/null ;}

# C++ files
cf() { find "$@" -type f -name "*.cpp" -o -name "*.h" -o -name "*.c" 2> /dev/null ;}
cs() { cf "$1" | xargs grep "$2" 2> /dev/null ;}
hf() { filefind "$@" "*.h" ;}
hs() { hf "$1" | xargs grep "$2" 2> /dev/null ;}

# CMakeLists from PWD
srchcmake() { filefind . "CMakeLists.txt" | xargs grep "$1" 2> /dev/null ;}

# -----------------------------------------------------------------------------
# misc

# Create a new directory and enter it
mkd() { mkdir -p "$@" && cd "$@" || return 1 ;}
dl() { cd "$DOWNLOAD_DIR" || return 1 ;}

# package/repo fetching shortcuts
aptin() { sudo apt-get install "$1" ;}
aptrem() { sudo apt-get remove "$1" ;}
ghclone() { git clone git@github.com:clux/"$1".git ;}
bbclone() { git clone git@bitbucket.org:clux/"$1".git ;}

kill-tabs() { pkill -u "$USER" -f "chrome.*renderer" ;}

# gls => ls | git prompt
gls() {
  local -r dirs=$(find . -maxdepth 1 -mindepth 1 -type d)
  dir=$PWD
  for d in $dirs; do
    cd "$d" || false
    echo -en "$(tput setaf 33)${d:2} "
    if [[ -d .git ]]; then
      echo -en "$(tput setaf 136)$(show_git_differences)$(tput sgr0)"
    fi
    echo
    cd ..
  done
  cd "$dir" || true
}

# -----------------------------------------------------------------------------
# system statistics/usage

mem() {
  free -t | grep Mem | awk '{ printf("%3.1f%%", $3*100/$2)}'
  echo
}
disk() {
  # Total usage of currently mounted logical drives
  df -l --total \
    | grep total \
    | awk '{printf("%3.1f%%\n", $3*100/$2)}'
}
cpu() { awk '{printf("%3.1f%%\n", $1*100/'"$(nproc)"') }' < /proc/loadavg ;}

iface() {
  # first interface with state UP
  ip link show | grep "state UP" | awk '{print $2}' | cut -d':' -f1
}
network() {
  local -r iface="$(iface)"
  # transferred numbers are in first column, print everything with space separation
  local -r netdata=$(ip -s link show "$iface" | awk -v ORS=" " '{ print $1 }')
  # convert relevant numbers to gigabytes
  local -r RX=$(echo "$netdata" | cut -d" " -f4 | awk '{printf("%3.1fGB\n", $1/1073741824)}')
  local -r TX=$(echo "$netdata" | cut -d" " -f6 | awk '{printf("%3.1fGB\n", $1/1073741824)}')
  echo -e "Sent: ${TX}\nRecv: ${RX}"
}

localip() {
  local -r iface="$(iface)"
  ip addr show "$iface" | grep inet | awk '{ print $2 }'
}

# process tree
#
# pstree :: simple tree hiding kernel workers
# pstree f :: full tree
# pstree u [user] :: user tree for $USER or passed in user
pstree() {
  local -r full=$([ "$1" = "f" ] && echo "1")
  local usr=""
  if [ "$1" = "u" ]; then
    usr=$([ -n "$2" ] && echo "$2" || echo "$USER")
  fi
  local flags=""
  if [ -n "$full" ]; then
    flags="-e -o cputime,pid,stat,user,args"
  elif [ -n "$usr" ]; then
    flags="U $usr -o cputime,pid,stat,args"
  else
    # Simple multi-user, filtering away PPID 2
    flags="--ppid 2 --deselect -o cputime,pid,stat,user,args"
  fi
  # shellcheck disable=SC2086
  ps $flags --forest --width $(($(tput cols)-1)) | less -RX
  # NB: the -1 is to compensate for what ccze puts in there
}

# -----------------------------------------------------------------------------
# scaffolding from templates folder

node-init() {
  find ~/.templates/npm/ -not -type d -not -iname pkg.json -exec cp {} "$PWD" \;
  pkginit
  local -r dir="$(basename "$PWD")"
  echo "# $dir" > README.md
  badgify >> README.md
  sed "s/BASENAME/$dir/g" readme.md >> README.md
  rm readme.md
}

# -----------------------------------------------------------------------------
# documentation generation for gh-pages

rust-doc-update() {
  cargo doc
  local -r repo=$(basename "$PWD")
  echo "<meta http-equiv=refresh content=0;url=$repo/index.html>" > target/doc/index.html
  ghp-import -n target/doc
  git push -qf "git@github.com:clux/$repo.git" gh-pages
}

polymer-doc-update() {
  if [ ! -d demo ]; then
    echo "No demo directory found"
    return
  fi
  local -r repo="$(basename "$PWD")"
  mkdir "components/$repo" -p
  cp demo/* "components/$repo"
  find -maxdepth 1 -type f -exec cp {} "components/$repo/" \;
  cp bower_components/* components/ -R
  echo "<meta http-equiv=refresh content=0;url=$repo/index.html>" > components/index.html
  ghp-import -n components
  git push -qf "git@github.com:clux/${repo}.git" gh-pages
}

# -----------------------------------------------------------------------------

# insert xkcd tar joke here
extract () {
  if [ -f "$1" ] ; then
      case "$1" in
          *.tar.bz2)   tar xvjf "$1"    ;;
          *.tar.gz)    tar xvzf "$1"    ;;
          *.bz2)       bunzip2 "$1"     ;;
          *.rar)       unrar x "$1"     ;;
          *.gz)        gunzip "$1"      ;;
          *.tar)       tar xvf "$1"     ;;
          *.tbz2)      tar xvjf "$1"    ;;
          *.tgz)       tar xvzf "$1"    ;;
          *.zip)       unzip "$1"       ;;
          *.Z)         uncompress "$1"  ;;
          *.7z)        7z x "$1"        ;;
          *)           echo "unknown extension for '$1'" ;;
      esac
  else
      echo "$1 is not a valid file!"
  fi
}
# usage: ball output [inputs]
ball () { tar czf "$1.tar" "${@:2}" ;}

# -----------------------------------------------------------------------------
# Broxy + brotorr integrations

movies-diff () {
  diff -u <(ls /media/clux/TOOL/MP4/Movies/) <(ls /media/clux/Zorn/NewMP4/BluRay/)
}

# xdg-mime handler
broxy-download () {
  # shellcheck disable=SC2029
  ssh broxy ./brotorr/torrent \""$1"\"
}

# Find flags for helpers
broxy-findflags() {
  echo -e "-not -name '.*' -not -regex '.*Trash.*' -not -name tmp -printf '%p\n'"
}
broxy-dirflags() { echo -e "-mindepth $1 -maxdepth $1 -type d" ;}

# Everything in DL - usually fetch from here
broxy-check() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck/DL && find . $(broxy-dirflags 1) $(broxy-findflags)"
}

# Everything
broxy-all() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck && find . $(broxy-dirflags 2) $(broxy-findflags)"
}

# Everything from last month
broxy-latest() {
  # shellcheck disable=SC2029
  ssh broxy "cd dumptruck && find . $(broxy-dirflags 2) -mtime -31 $(broxy-findflags)"
}

# Grab from broxy with a pattern with confirmation
broxy-grab() {
  local -r rs=$(broxy-all | grep "$1")
  echo "Will download:"
  echo "$rs"
  read -rp "Enter to continue.."
  echo "Starting download"
  echo "$rs" | while read -r line; do
    fldr=$(echo "$line" | cut -d '/' -f2-)
    echo "Downloading $fldr"
    rsync -cahzP -e ssh "broxy:/home/bro/dumptruck/$fldr" .
  done
}

# -----------------------------------------------------------------------------
# Get colors in manual pages

man() {
  env \
    LESS_TERMCAP_mb="$(printf "\e[1;31m")" \
    LESS_TERMCAP_md="$(printf "\e[1;31m")" \
    LESS_TERMCAP_me="$(printf "\e[0m")" \
    LESS_TERMCAP_se="$(printf "\e[0m")" \
    LESS_TERMCAP_so="$(printf "\e[1;44;33m")" \
    LESS_TERMCAP_ue="$(printf "\e[0m")" \
    LESS_TERMCAP_us="$(printf "\e[1;32m")" \
    man "$@"
}

# -----------------------------------------------------------------------------
# Publishing helpers

npm-patch() {
  npm version patch && git push && git push --tags && npm publish
}
npm-minor() {
  npm version minor && git push && git push --tags && npm publish
}
npm-major() {
  npm version major && git push && git push --tags && npm publish
}

# -----------------------------------------------------------------------------
# sshfs helper for quick sublime based editing

remedit() {
  mkdir -p ~/remote
  sshfs "$1" ~/remote
  subl ~/remote
}
remclose() {
  fusermount -u ~/remote
  rm -d ~/remote
}

# common mount points
remedit-cloud() { remedit workstation:/home/clux/repos/cloudroot ;}
remedit-sqbu() { remedit workstation:/home/clux/sqbu ;}
remedit-b22() { remedit b22:/nu/ealbrigt/root ;}

# -----------------------------------------------------------------------------
# ssh agent laziness

key() {
  keychain "$HOME/.ssh/$1_id_rsa" --timeout 120 --quiet --host agent
  source ~/.keychain/agent-sh
}
